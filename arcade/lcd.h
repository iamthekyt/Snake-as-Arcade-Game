#define LCD_CMD     0
#define LCD_C       LOW
#define LCD_D       HIGH
#define LCD_X       84
#define LCD_Y       48

#include <avr/pgmspace.h>

const byte ASCII[][5] PROGMEM =
{
     {0x00, 0x00, 0x00, 0x00, 0x00} // 20
    ,{0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
    ,{0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
    ,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
    ,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
    ,{0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
    ,{0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
    ,{0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
    ,{0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
    ,{0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
    ,{0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
    ,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
    ,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
    ,{0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
    ,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
    ,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
    ,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
    ,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
    ,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
    ,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
    ,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
    ,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
    ,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
    ,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
    ,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
    ,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
    ,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
    ,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
    ,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
    ,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
    ,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
    ,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
    ,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
    ,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
    ,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
    ,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
    ,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
    ,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
    ,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
    ,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
    ,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
    ,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
    ,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
    ,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
    ,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
    ,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
    ,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
    ,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
    ,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
    ,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
    ,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
    ,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
    ,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
    ,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
    ,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
    ,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
    ,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
    ,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
    ,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
    ,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
    ,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c ¥
    ,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
    ,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
    ,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
    ,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
    ,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
    ,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
    ,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
    ,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
    ,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
    ,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
    ,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
    ,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
    ,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
    ,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
    ,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
    ,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
    ,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
    ,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
    ,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
    ,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
    ,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
    ,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
    ,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
    ,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
    ,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
    ,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
    ,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
    ,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
    ,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
    ,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
    ,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
    ,{0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
    ,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
    ,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ←
    ,{0x00, 0x06, 0x09, 0x09, 0x06} // 7f →
};

class LCD {
    
    byte sce;
    byte rst;
    byte dc;
    byte sdin;
    byte sclk;
    byte light;

    byte map[LCD_X * LCD_Y / 8];
    
public:
    LCD(byte sce, byte rst, byte dc, byte sdin, byte sclk, byte light)
    {
        this->sce = sce;
        this->rst = rst;
        this->dc = dc;
        this->sdin = sdin;
        this->sclk = sclk;
        this->light = light;
    }
    
    void init()
    {
        pinMode(sce,    OUTPUT);
        pinMode(rst,    OUTPUT);
        pinMode(dc,     OUTPUT);
        pinMode(sdin,   OUTPUT);
        pinMode(sclk,   OUTPUT);
        pinMode(light,  OUTPUT);

        analogWrite(light,  0x7F);
        digitalWrite(rst,   LOW);
        //delay(10);
        digitalWrite(rst, HIGH);

        write(LCD_CMD,  0x21);  // LCD Extended Commands.
        write(LCD_CMD,  0xB2);  // Set LCD Vop (Contrast). //B1
        write(LCD_CMD,  0x04);  // Set Temp coefficent. //0x04
        write(LCD_CMD,  0x14);  // LCD bias mode 1:48. //0x13
        write(LCD_CMD,  0x0C);  // LCD in normal mode. 0x0d for inverse
        write(LCD_C,    0x20);
        write(LCD_C,    0x0C);
    }
    void erase()
    {
        for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
        {
            write(LCD_D, 0x00);
        }
        memset(map, 0, sizeof map);
    }
    void write(byte dc, byte data)
    {
        digitalWrite(this->dc, dc);
        digitalWrite(sce, LOW);
        shiftOut(sdin, sclk, MSBFIRST, data);
        digitalWrite(sce, HIGH);
    }
    void gotoXY(int x, int y)
    {
        write(LCD_CMD, 0x80 | x);  // Column.
        write(LCD_CMD, 0x40 | y);  // Row.
    }
    void writeCharacter(char character)
    {
        write(LCD_D, 0x00);
        for (int index = 0; index < 5; index++)
        {
            write(LCD_D,
                pgm_read_byte_near(ASCII[character - 0x20] + index));
        }
        write(LCD_D, 0x00);
    }

    void writeString(char *characters)
    {
        while (*characters)
        {
            writeCharacter(*characters++);
        }
    }

    void setPixel(byte x, byte y, byte color)
    {
        if ((x < 0) || (x >= LCD_X) || (y < 0) || (y >= LCD_Y))
            return;

        if (color) 
            map[x+ (y/8)*LCD_X] |= (1 << (y % 8));
        else
            map[x+ (y/8)*LCD_X] &= ~(1 << (y % 8));

    }

    void updatePixel(byte x, byte y)
    {
        float line_f = y / 8;
        byte line = (byte)floor(line_f);
        gotoXY(x, line);
        Serial.print(x);
        Serial.print(" ");
        Serial.println(line);
        write(LCD_D, 0x00);
        write(LCD_D, map[LCD_X * line + x]);
        write(LCD_D, 0x00);
    }

    void drawMap()
    {
        gotoXY(0, 0);
        write(LCD_D, 0x00);
        
        for (word i = 0; i < (LCD_X * LCD_Y / 8); i++)
        {
            write(LCD_D, map[i]);
        }
        write(LCD_D, 0x00);
    }
};

const byte arcade_logo_image[6 * 84] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFE, 0x22, 0xE2, 0xFA, 0xF2, 0xD0, 0xFA, 0x8A, 0xFA, 0xE4, 0xF0, 0xEC, 0xBA, 0x76, 0xFA, 0x8A, 0x82, 0x9A, 0xFA, 0x8A, 0xFA, 0x2A, 0xAA, 0xFA, 0xE2, 0x7A, 0xCA, 0x4A, 0xDA, 0x82, 0x7A, 0x88, 0x48, 0xE2, 0xFA, 0xE2, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0D, 0xFA, 0x00, 0x01, 0xE3, 0x1C, 0x04, 0xF4, 0xF4, 0xF2, 0xF2, 0xF2, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF6, 0xF4, 0xC4, 0x04, 0x1E, 0xE1, 0x01, 0xFA, 0x0D, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x3E, 0x8F, 0x40, 0x60, 0x5F, 0x40, 0x6F, 0x3F, 0xFF, 0xFF, 0x3F, 0x5F, 0x5F, 0x5F, 0x5F, 0xDF, 0xDF, 0xDF, 0xDF, 0x5F, 0x1F, 0xDF, 0x1F, 0x5F, 0xDF, 0xDF, 0xCF, 0xC7, 0xC0, 0x40, 0x7F, 0x60, 0xBF, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF3, 0x00, 0x1F, 0x3E, 0xE2, 0x02, 0x02, 0x02, 0xE2, 0x13, 0x13, 0x12, 0x12, 0x92, 0x92, 0x92, 0x92, 0x92, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x93, 0x12, 0x12, 0x02, 0xE2, 0x02, 0x02, 0x02, 0xF6, 0x7E, 0xFF, 0x00, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0xC0, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x3F, 0x20, 0x20, 0x20, 0x20, 0x23, 0x22, 0x22, 0x22, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x23, 0x20, 0x20, 0x1F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x01, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3F, 0xF0, 0x80, 0x87, 0x84, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x83, 0x80, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
